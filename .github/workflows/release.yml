name: 'Release'

on:
  release:
    types: [ published ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      ARTIFACT_PATH: ${{ steps.prepare_artifact_metadata.outputs.ARTIFACT_PATH }}
      ARTIFACT_NAME: ${{ steps.prepare_artifact_metadata.outputs.ARTIFACT_NAME }}
      JAVADOC_PATH: ${{ steps.prepare_artifact_metadata.outputs.JAVADOC_PATH }}
      JAVADOC_NAME: ${{ steps.prepare_artifact_metadata.outputs.JAVADOC_NAME }}
      API_PATH: ${{ steps.prepare_artifact_metadata.outputs.API_PATH }}
      API_NAME: ${{ steps.prepare_artifact_metadata.outputs.API_NAME }}
      VERSION: ${{ steps.prepare_artifact_metadata.outputs.VERSION }}

    steps:
      - uses: actions/checkout@v4
      - uses: Frontiers-PackForge/Applied-Energistics-2-cosmolite/.github/actions/gradle-setup@forge/1.20.1
      - name: Build with Gradle
        env:
          MAVEN_USER: ${{ secrets.MAVEN_USER }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
        run: ./gradlew build publish -x check --max-workers 1
      - name: Prepare artifact metadata. Note that VERSION is set by the gradle script.
        id: prepare_artifact_metadata
        run: |
          echo ARTIFACT_PATH=./build/libs/appliedenergistics2-forge-${VERSION}.jar >> $GITHUB_OUTPUT
          echo ARTIFACT_NAME=appliedenergistics2-forge-${VERSION}.jar >> $GITHUB_OUTPUT
          echo JAVADOC_PATH=./build/libs/appliedenergistics2-forge-${VERSION}-javadoc.jar >> $GITHUB_OUTPUT
          echo JAVADOC_NAME=appliedenergistics2-forge-${VERSION}-javadoc.jar >> $GITHUB_OUTPUT
          echo API_PATH=./build/libs/appliedenergistics2-forge-${VERSION}-api.jar >> $GITHUB_OUTPUT
          echo API_NAME=appliedenergistics2-forge-${VERSION}-api.jar >> $GITHUB_OUTPUT
          echo VERSION=${VERSION} >> $GITHUB_OUTPUT
      - name: Archive build results
        # It is important to  archive .gradle as well since gradle stores the incremental build state there
        run: tar -I zstd -cf build.tar.zst build/libs build/repo
      - name: Upload build and gradle folders
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build.tar.zst
          if-no-files-found: error
          retention-days: 3

  upload-release-artifacts:
    name: Upload Release Artifacts
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      - name: Unpack build artifact
        run: tar axf build.tar.zst
      - name: Upload Release Artifact
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ needs.build.outputs.ARTIFACT_PATH }}
          asset_name: ${{ needs.build.outputs.ARTIFACT_NAME }}
          asset_content_type: application/zip
      - name: Upload Javadocs Artifact
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ needs.build.outputs.JAVADOC_PATH }}
          asset_name: ${{ needs.build.outputs.JAVADOC_NAME }}
          asset_content_type: application/zip
      - name: Upload API
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ needs.build.outputs.API_PATH }}
          asset_name: ${{ needs.build.outputs.API_NAME }}
          asset_content_type: application/zip
