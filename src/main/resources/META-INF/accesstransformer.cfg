# GUI rendering
protected net.minecraft.client.gui.screens.inventory.AbstractContainerScreen renderSlot(Lnet/minecraft/client/gui/GuiGraphics;Lnet/minecraft/world/inventory/Slot;)V
public net.minecraft.client.gui.components.EditBox getMaxLength()I
public net.minecraft.client.gui.components.EditBox isEditable()Z

public net.minecraft.world.inventory.Slot slot
protected net.minecraft.client.gui.screens.inventory.AbstractContainerScreen isHovering(Lnet/minecraft/world/inventory/Slot;DD)Z
protected net.minecraft.client.gui.screens.inventory.AbstractContainerScreen getHoveredSlot(DD)Lnet/minecraft/world/inventory/Slot;

# Baked Quad Winding
public net.minecraft.client.renderer.block.model.FaceBakery recalculateWinding([ILnet/minecraft/core/Direction;)V

# Worldgen
public net.minecraft.data.worldgen.placement.OrePlacements commonOrePlacement(ILnet/minecraft/world/level/levelgen/placement/PlacementModifier;)Ljava/util/List;

# Tests
public net.minecraft.gametest.framework.GameTestHelper testInfo

# Delay continued left clicks
public net.minecraft.client.multiplayer.MultiPlayerGameMode destroyDelay

# We need to change yPos of existing slots to resize the container
public-f net.minecraft.world.inventory.Slot x
public-f net.minecraft.world.inventory.Slot y

# To disable water-bobbing of item entities (for growing crystals)
protected net.minecraft.world.entity.item.ItemEntity setUnderwaterMovement()V

# For overlay rendering
public net.minecraft.client.renderer.RenderStateShard$LineStateShard

# Villager Trades
public net.minecraft.world.entity.npc.VillagerTrades$EmeraldForItems
public net.minecraft.world.entity.npc.VillagerTrades$ItemsForEmeralds

# GUI
public net.minecraft.world.inventory.AbstractContainerMenu stateId
public net.minecraft.client.gui.screens.Screen setInitialFocus(Lnet/minecraft/client/gui/components/events/GuiEventListener;)V

# Matter Cannon Damage Source
public net.minecraft.world.damagesource.DamageSources source(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/damagesource/DamageSource;
public net.minecraft.world.damagesource.DamageSources source(Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/world/damagesource/DamageSource;
public net.minecraft.world.damagesource.DamageSources source(Lnet/minecraft/resources/ResourceKey;Lnet/minecraft/world/entity/Entity;)Lnet/minecraft/world/damagesource/DamageSource;

public net.minecraft.world.level.block.Blocks always(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z
public net.minecraft.world.level.block.Blocks never(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;)Z

public net.minecraft.client.gui.GuiGraphics renderItem(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/item/ItemStack;III)V

public net.minecraft.client.renderer.RenderType$CompositeRenderType

public net.minecraft.client.renderer.texture.TextureAtlas getWidth()I
public net.minecraft.client.renderer.texture.TextureAtlas getHeight()I

# Entity forceloading
public net.minecraft.server.level.ServerLevel entityManager
public net.minecraft.world.level.entity.PersistentEntitySectionManager permanentStorage
public net.minecraft.world.level.entity.PersistentEntitySectionManager chunkVisibility

# Poi listing for spatial IO
public net.minecraft.world.level.chunk.storage.SectionStorage getOrLoad(J)Ljava/util/Optional;

public net.minecraft.core.cauldron.CauldronInteraction dyedItemIteration(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/InteractionResult; # dyedItemIteration

public net.minecraft.world.item.crafting.SingleItemRecipe result()Lnet/minecraft/world/item/ItemStack; # result

public net.minecraft.client.particle.ParticleEngine spriteSets
