// automatically generated by the FlatBuffers compiler, do not modify

package appeng.flatbuffers.scene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@javax.annotation.processing.Generated(value="flatc")
@SuppressWarnings("unused")
public final class ExpMesh extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static ExpMesh getRootAsExpMesh(ByteBuffer _bb) { return getRootAsExpMesh(_bb, new ExpMesh()); }
  public static ExpMesh getRootAsExpMesh(ByteBuffer _bb, ExpMesh obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ExpMesh __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public appeng.flatbuffers.scene.ExpMaterial material() { return material(new appeng.flatbuffers.scene.ExpMaterial()); }
  public appeng.flatbuffers.scene.ExpMaterial material(appeng.flatbuffers.scene.ExpMaterial obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public appeng.flatbuffers.scene.ExpVertexFormat vertexFormat() { return vertexFormat(new appeng.flatbuffers.scene.ExpVertexFormat()); }
  public appeng.flatbuffers.scene.ExpVertexFormat vertexFormat(appeng.flatbuffers.scene.ExpVertexFormat obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public int primitiveType() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutatePrimitiveType(int primitive_type) { int o = __offset(8); if (o != 0) { bb.put(o + bb_pos, (byte) primitive_type); return true; } else { return false; } }
  public int indexBuffer(int j) { int o = __offset(10); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int indexBufferLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector indexBufferVector() { return indexBufferVector(new ByteVector()); }
  public ByteVector indexBufferVector(ByteVector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer indexBufferAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer indexBufferInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public boolean mutateIndexBuffer(int j, int index_buffer) { int o = __offset(10); if (o != 0) { bb.put(__vector(o) + j * 1, (byte) index_buffer); return true; } else { return false; } }
  public int indexType() { int o = __offset(12); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateIndexType(int index_type) { int o = __offset(12); if (o != 0) { bb.put(o + bb_pos, (byte) index_type); return true; } else { return false; } }
  public long indexCount() { int o = __offset(14); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public boolean mutateIndexCount(long index_count) { int o = __offset(14); if (o != 0) { bb.putInt(o + bb_pos, (int) index_count); return true; } else { return false; } }
  public int vertexBuffer(int j) { int o = __offset(16); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int vertexBufferLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector vertexBufferVector() { return vertexBufferVector(new ByteVector()); }
  public ByteVector vertexBufferVector(ByteVector obj) { int o = __offset(16); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer vertexBufferAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer vertexBufferInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  public boolean mutateVertexBuffer(int j, int vertex_buffer) { int o = __offset(16); if (o != 0) { bb.put(__vector(o) + j * 1, (byte) vertex_buffer); return true; } else { return false; } }

  public static int createExpMesh(FlatBufferBuilder builder,
      int materialOffset,
      int vertexFormatOffset,
      int primitiveType,
      int indexBufferOffset,
      int indexType,
      long indexCount,
      int vertexBufferOffset) {
    builder.startTable(7);
    ExpMesh.addVertexBuffer(builder, vertexBufferOffset);
    ExpMesh.addIndexCount(builder, indexCount);
    ExpMesh.addIndexBuffer(builder, indexBufferOffset);
    ExpMesh.addVertexFormat(builder, vertexFormatOffset);
    ExpMesh.addMaterial(builder, materialOffset);
    ExpMesh.addIndexType(builder, indexType);
    ExpMesh.addPrimitiveType(builder, primitiveType);
    return ExpMesh.endExpMesh(builder);
  }

  public static void startExpMesh(FlatBufferBuilder builder) { builder.startTable(7); }
  public static void addMaterial(FlatBufferBuilder builder, int materialOffset) { builder.addOffset(0, materialOffset, 0); }
  public static void addVertexFormat(FlatBufferBuilder builder, int vertexFormatOffset) { builder.addOffset(1, vertexFormatOffset, 0); }
  public static void addPrimitiveType(FlatBufferBuilder builder, int primitiveType) { builder.addByte(2, (byte) primitiveType, (byte) 0); }
  public static void addIndexBuffer(FlatBufferBuilder builder, int indexBufferOffset) { builder.addOffset(3, indexBufferOffset, 0); }
  public static int createIndexBufferVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createIndexBufferVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startIndexBufferVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addIndexType(FlatBufferBuilder builder, int indexType) { builder.addByte(4, (byte) indexType, (byte) 0); }
  public static void addIndexCount(FlatBufferBuilder builder, long indexCount) { builder.addInt(5, (int) indexCount, (int) 0L); }
  public static void addVertexBuffer(FlatBufferBuilder builder, int vertexBufferOffset) { builder.addOffset(6, vertexBufferOffset, 0); }
  public static int createVertexBufferVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createVertexBufferVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startVertexBufferVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endExpMesh(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ExpMesh get(int j) { return get(new ExpMesh(), j); }
    public ExpMesh get(ExpMesh obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

