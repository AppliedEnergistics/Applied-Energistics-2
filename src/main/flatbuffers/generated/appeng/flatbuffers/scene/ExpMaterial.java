// automatically generated by the FlatBuffers compiler, do not modify

package appeng.flatbuffers.scene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@javax.annotation.processing.Generated(value="flatc")
@SuppressWarnings("unused")
public final class ExpMaterial extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static ExpMaterial getRootAsExpMaterial(ByteBuffer _bb) { return getRootAsExpMaterial(_bb, new ExpMaterial()); }
  public static ExpMaterial getRootAsExpMaterial(ByteBuffer _bb, ExpMaterial obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ExpMaterial __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String shaderName() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer shaderNameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer shaderNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public boolean disableCulling() { int o = __offset(8); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean mutateDisableCulling(boolean disable_culling) { int o = __offset(8); if (o != 0) { bb.put(o + bb_pos, (byte)(disable_culling ? 1 : 0)); return true; } else { return false; } }
  public int transparency() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateTransparency(int transparency) { int o = __offset(10); if (o != 0) { bb.put(o + bb_pos, (byte) transparency); return true; } else { return false; } }
  public int depthTest() { int o = __offset(12); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateDepthTest(int depth_test) { int o = __offset(12); if (o != 0) { bb.put(o + bb_pos, (byte) depth_test); return true; } else { return false; } }
  public appeng.flatbuffers.scene.ExpSampler samplers(int j) { return samplers(new appeng.flatbuffers.scene.ExpSampler(), j); }
  public appeng.flatbuffers.scene.ExpSampler samplers(appeng.flatbuffers.scene.ExpSampler obj, int j) { int o = __offset(14); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int samplersLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public appeng.flatbuffers.scene.ExpSampler.Vector samplersVector() { return samplersVector(new appeng.flatbuffers.scene.ExpSampler.Vector()); }
  public appeng.flatbuffers.scene.ExpSampler.Vector samplersVector(appeng.flatbuffers.scene.ExpSampler.Vector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createExpMaterial(FlatBufferBuilder builder,
      int nameOffset,
      int shaderNameOffset,
      boolean disableCulling,
      int transparency,
      int depthTest,
      int samplersOffset) {
    builder.startTable(6);
    ExpMaterial.addSamplers(builder, samplersOffset);
    ExpMaterial.addShaderName(builder, shaderNameOffset);
    ExpMaterial.addName(builder, nameOffset);
    ExpMaterial.addDepthTest(builder, depthTest);
    ExpMaterial.addTransparency(builder, transparency);
    ExpMaterial.addDisableCulling(builder, disableCulling);
    return ExpMaterial.endExpMaterial(builder);
  }

  public static void startExpMaterial(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addShaderName(FlatBufferBuilder builder, int shaderNameOffset) { builder.addOffset(1, shaderNameOffset, 0); }
  public static void addDisableCulling(FlatBufferBuilder builder, boolean disableCulling) { builder.addBoolean(2, disableCulling, false); }
  public static void addTransparency(FlatBufferBuilder builder, int transparency) { builder.addByte(3, (byte) transparency, (byte) 0); }
  public static void addDepthTest(FlatBufferBuilder builder, int depthTest) { builder.addByte(4, (byte) depthTest, (byte) 0); }
  public static void addSamplers(FlatBufferBuilder builder, int samplersOffset) { builder.addOffset(5, samplersOffset, 0); }
  public static int createSamplersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSamplersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endExpMaterial(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ExpMaterial get(int j) { return get(new ExpMaterial(), j); }
    public ExpMaterial get(ExpMaterial obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

