// automatically generated by the FlatBuffers compiler, do not modify

package appeng.flatbuffers.scene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@javax.annotation.processing.Generated(value="flatc")
@SuppressWarnings("unused")
public final class ExpVertexFormatElement extends Struct {
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ExpVertexFormatElement __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int index() { return bb.get(bb_pos + 0) & 0xFF; }
  public void mutateIndex(int index) { bb.put(bb_pos + 0, (byte) index); }
  public int type() { return bb.get(bb_pos + 1) & 0xFF; }
  public void mutateType(int type) { bb.put(bb_pos + 1, (byte) type); }
  public int usage() { return bb.get(bb_pos + 2) & 0xFF; }
  public void mutateUsage(int usage) { bb.put(bb_pos + 2, (byte) usage); }
  public int count() { return bb.get(bb_pos + 3) & 0xFF; }
  public void mutateCount(int count) { bb.put(bb_pos + 3, (byte) count); }
  public int offset() { return bb.get(bb_pos + 4) & 0xFF; }
  public void mutateOffset(int offset) { bb.put(bb_pos + 4, (byte) offset); }
  public int byteSize() { return bb.get(bb_pos + 5) & 0xFF; }
  public void mutateByteSize(int byte_size) { bb.put(bb_pos + 5, (byte) byte_size); }
  public boolean normalized() { return 0!=bb.get(bb_pos + 6); }
  public void mutateNormalized(boolean normalized) { bb.put(bb_pos + 6, (byte)(normalized ? 1 : 0)); }

  public static int createExpVertexFormatElement(FlatBufferBuilder builder, int index, int type, int usage, int count, int offset, int byteSize, boolean normalized) {
    builder.prep(1, 7);
    builder.putBoolean(normalized);
    builder.putByte((byte) byteSize);
    builder.putByte((byte) offset);
    builder.putByte((byte) count);
    builder.putByte((byte) usage);
    builder.putByte((byte) type);
    builder.putByte((byte) index);
    return builder.offset();
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ExpVertexFormatElement get(int j) { return get(new ExpVertexFormatElement(), j); }
    public ExpVertexFormatElement get(ExpVertexFormatElement obj, int j) {  return obj.__assign(__element(j), bb); }
  }
}

