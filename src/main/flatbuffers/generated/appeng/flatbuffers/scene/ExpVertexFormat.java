// automatically generated by the FlatBuffers compiler, do not modify

package appeng.flatbuffers.scene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@javax.annotation.processing.Generated(value="flatc")
@SuppressWarnings("unused")
public final class ExpVertexFormat extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static ExpVertexFormat getRootAsExpVertexFormat(ByteBuffer _bb) { return getRootAsExpVertexFormat(_bb, new ExpVertexFormat()); }
  public static ExpVertexFormat getRootAsExpVertexFormat(ByteBuffer _bb, ExpVertexFormat obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ExpVertexFormat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public appeng.flatbuffers.scene.ExpVertexFormatElement elements(int j) { return elements(new appeng.flatbuffers.scene.ExpVertexFormatElement(), j); }
  public appeng.flatbuffers.scene.ExpVertexFormatElement elements(appeng.flatbuffers.scene.ExpVertexFormatElement obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o) + j * 7, bb) : null; }
  public int elementsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public appeng.flatbuffers.scene.ExpVertexFormatElement.Vector elementsVector() { return elementsVector(new appeng.flatbuffers.scene.ExpVertexFormatElement.Vector()); }
  public appeng.flatbuffers.scene.ExpVertexFormatElement.Vector elementsVector(appeng.flatbuffers.scene.ExpVertexFormatElement.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 7, bb) : null; }
  public int vertexSize() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public boolean mutateVertexSize(int vertex_size) { int o = __offset(6); if (o != 0) { bb.put(o + bb_pos, (byte) vertex_size); return true; } else { return false; } }

  public static int createExpVertexFormat(FlatBufferBuilder builder,
      int elementsOffset,
      int vertexSize) {
    builder.startTable(2);
    ExpVertexFormat.addElements(builder, elementsOffset);
    ExpVertexFormat.addVertexSize(builder, vertexSize);
    return ExpVertexFormat.endExpVertexFormat(builder);
  }

  public static void startExpVertexFormat(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addElements(FlatBufferBuilder builder, int elementsOffset) { builder.addOffset(0, elementsOffset, 0); }
  public static void startElementsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(7, numElems, 1); }
  public static void addVertexSize(FlatBufferBuilder builder, int vertexSize) { builder.addByte(1, (byte) vertexSize, (byte) 0); }
  public static int endExpVertexFormat(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ExpVertexFormat get(int j) { return get(new ExpVertexFormat(), j); }
    public ExpVertexFormat get(ExpVertexFormat obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

