/*
 * This file is part of Applied Energistics 2.
 * Copyright (c) 2013 - 2015, AlgorithmX2, All rights reserved.
 *
 * Applied Energistics 2 is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Applied Energistics 2 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Applied Energistics 2.  If not, see <http://www.gnu.org/licenses/lgpl>.
 */

plugins {
    id 'java'
    id 'forgified-fabric-loom'
    id 'maven-publish'
    id "com.diffplug.gradle.spotless" version "4.3.0"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "org.sonarqube" version "2.8"
    id "jacoco"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url = "https://maven.fabricmc.net/" }
    maven {
        name = "BuildCraft"
        url = "https://mod-buildcraft.com/maven"
        content {
            includeGroup "alexiil.mc.lib"
        }
    }
    maven {
        name = "HYWLA"
        url = "https://maven.tehnut.info/"
        content {
            includeGroup "mcp.mobius.waila"
        }
    }
    maven {
        name = "shedaniel"
        url = "https://maven.shedaniel.me"
        content {
            includeGroup "me.sargunvohra.mcmods"
            includeGroup "me.shedaniel"
            includeGroup "me.shedaniel.cloth"
            includeGroup "me.shedaniel.cloth.api"
        }
    }
    maven {
        name = "Technici4n"
        url = "https://raw.githubusercontent.com/Technici4n/Technici4n-maven/master/"
        content {
            includeGroup "dev.technici4n"
            includeGroup "net.fabricmc.fabric-api" // until ItemApiLookup PR #1352 is merged.
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "de.oceanlabs.mcp:mcp_snapshot:20201028-1.16.3"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    //Fabric api
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "alexiil.mc.lib:libblockattributes-core:${libblockattributes_version}"
    modImplementation "alexiil.mc.lib:libblockattributes-items:${libblockattributes_version}"
    modImplementation "alexiil.mc.lib:libblockattributes-fluids:${libblockattributes_version}"
    include "alexiil.mc.lib:libblockattributes-core:${libblockattributes_version}"
    include "alexiil.mc.lib:libblockattributes-items:${libblockattributes_version}"
    include "alexiil.mc.lib:libblockattributes-fluids:${libblockattributes_version}"

    // Energy API
    modApi include("dev.technici4n:FastTransferLib:${project.ftl_version}", {
        exclude group: "teamreborn"
    })

    modCompileOnly("me.shedaniel:RoughlyEnoughItems:${rei_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }
    modCompileOnly("mcp.mobius.waila:Hwyla:1.16.1-1.9.22-75") {
        exclude group: "net.fabricmc.fabric-api"
    }
    modRuntime("me.shedaniel:RoughlyEnoughItems:${rei_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }
//    modRuntimeOnly "mcp.mobius.waila:Hwyla:1.16.1-1.9.22-75"

    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    // unit test dependencies
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.7.1")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.7.1")
    testImplementation("org.assertj:assertj-core:3.19.0")
    testImplementation("com.google.guava:guava-testlib:21.0")
}
group = artifact_group
archivesBaseName = artifact_basename

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
    options.deprecation = false
}

// ensure everything uses UTF-8 and not some random codepage chosen by gradle
compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

///////////////////
// Version Number

ext.pr = System.getenv('PR_NUMBER') ?: ""
if (ext.pr) {
  version = version + "+pr." + ext.pr
}

ext.branch = System.getenv('BRANCH') ?: ""
if (ext.branch) {
  version = version + "+branch." + ext.branch
}

ext.tag = System.getenv('TAG') ?: ""
if (ext.tag && ext.tag.startsWith("fabric/v") && System.getenv("GITHUB_ENV")) {
  version = ext.tag.substring("fabric/v".length())
  def envFile = new File(System.getenv("GITHUB_ENV"))
  // Validate that the rest is a semver version
  if (version ==~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/) {
    envFile.append("VERSION=${version}")
  } else {
    throw new GradleException("Invalid semver: $version")
  }
}

ext.isAlpha = project.version.contains("alpha")
ext.isBeta = project.version.contains("beta")

sourceSets {
    api
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        resources {
            srcDir 'src/generated/resources'
        }
    }
    datagen {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    test {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
    siteexport {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    apiCompile.extendsFrom(compileClasspath)
    datagenCompile.extendsFrom(compileClasspath)
    siteexportCompile.extendsFrom(compileClasspath)
    siteexportRuntime.extendsFrom(runtimeClasspath)
}

test {
    useJUnitPlatform()
}

////////////////////
// Forge/Minecraft
minecraft {
    accessWidener "src/main/resources/appliedenergistics2.accesswidener"
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

//////////////
// Aritfacts
processResources {
    exclude '.cache'
}

jar {
    finalizedBy 'remapJar'

    from sourceSets.main.output.classesDirs
    from sourceSets.api.output.classesDirs
    from sourceSets.main.output.resourcesDir
    from sourceSets.api.output.resourcesDir

    manifest {
        attributes([
                "Specification-Title": "Applied Energistics 2",
                "Specification-Vendor": "TeamAppliedEnergistics",
                "Specification-Version": "${project.version}",
                "Implementation-Title": "${project.name}",
                "Implementation-Version": "${project.version}",
                "Implementation-Vendor" :"TeamAppliedEnergistics",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "appliedenergistics2.mixins.json"
        ])
    }
}

task javadocs(type: Javadoc) {
    classpath = sourceSets.main.compileClasspath
    source = sourceSets.api.java
    include "appeng/api/**"

    options.addStringOption('Xdoclint:none', '-quiet')
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
}

task javadocJar(type: Jar, dependsOn: javadocs) {
    classifier = "javadoc"
    from javadoc.destinationDir
}
// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
    from sourceSets.api.allSource
}

task apiJar(type: Jar) {
    classifier = "api"
    from sourceSets.api.output
    include "appeng/api/**"

    // TODO: when FG bug is fixed, remove allJava from the api jar.
    // https://github.com/MinecraftForge/ForgeGradle/issues/369
    // Gradle should be able to pull them from the -sources jar.
    from sourceSets.api.allJava
}

artifacts {
    archives javadocJar
    archives sourcesJar
    archives apiJar
}

//////////////////
// Maven publish
publishing {
    if (!version.endsWith("-SNAPSHOT")) {
        publications {
            maven(MavenPublication) {
                groupId = project.group
                artifactId = 'appliedenergistics2-fabric'
                version = project.version

                // add all the jars that should be included when publishing to maven
                artifact(remapJar) {
                    builtBy remapJar
                }
                artifact(sourcesJar) {
                    builtBy remapSourcesJar
                }
                artifact javadocJar
                artifact apiJar
            }
        }
    }
    repositories {
        maven {
            credentials {
                username System.getenv("GITHUB_ACTOR")
                password System.getenv("GITHUB_TOKEN")
            }
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/AppliedEnergistics/Applied-Energistics-2"
        }
        maven {
            credentials {
                username System.getenv("MODMAVEN_USER")
                password System.getenv("MODMAVEN_PASSWORD")
            }
            name = "modmaven"
            url = "https://modmaven.dev/artifactory/local-releases/"
        }
    }

}

import net.fabricmc.loom.task.RunClientTask;

task generateData(type: RunClientTask, dependsOn: downloadAssets, group: "ae2", description: "Generates various JSON assets for the mod") {
    classpath = configurations.runtimeClasspath
    classpath sourceSets.api.output
    classpath sourceSets.main.output
    classpath sourceSets.datagen.output
    systemProperty "appeng.generateData", "true"
}
build.dependsOn generateData

task runSiteExport(type: RunClientTask, dependsOn: downloadAssets, group: "ae2", description: "Export game assets for the website") {
    classpath = configurations.runtimeClasspath
    classpath sourceSets.api.output
    classpath sourceSets.main.output
    classpath sourceSets.siteexport.output
}

/////////////
// Spotless
spotless {
    java {
        target 'src/*/java/appeng/**/*.java'

        indentWithSpaces()
        eclipse().configFile 'codeformat/codeformat.xml'
        importOrderFile 'codeformat/ae2.importorder'
    }
    format 'json', {
        target 'src/*/resources/**/*.json'
        targetExclude 'src/generated/resources/**'
        prettier().config(['parser': 'json'])
    }
}

////////////////
// Curse Forge
if (System.getenv("CURSEFORGE") && !version.endsWith("-SNAPSHOT")) {
    def cfReleaseType = "release"
    if (ext.isAlpha) {
      cfReleaseType = "alpha"
    } else if (ext.isBeta) {
      cfReleaseType = "beta"
    }

    curseforge {
        apiKey = System.getenv("CURSEFORGE")
        project {
            id = project.curseforge_project
            changelogType = "markdown"
            changelog = System.getenv("CHANGELOG") ?: "Please visit our [releases](https://github.com/AppliedEnergistics/Applied-Energistics-2/releases) for a changelog"
            releaseType = cfReleaseType
            addGameVersion project.minecraft_version
            addGameVersion "Fabric"
            mainArtifact(remapJar.archiveFile) {
                displayName = "${project.version} [FABRIC]"
            }
        }
        options {
            forgeGradleIntegration = false
        }
        afterEvaluate {
            tasks.getByName("curseforge${project.curseforge_project}").dependsOn remapJar
        }
    }
}

////////////////
// IntelliJ Project Import
// The Mixin annotation process does not have an obfuscation source when running through the IntelliJ compiler,
// thus we have to prevent it from being activated as part of importing this Gradle project into IntelliJ.
if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}
