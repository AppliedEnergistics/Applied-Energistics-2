/*
 * This file is part of Applied Energistics 2.
 * Copyright (c) 2013 - 2015, AlgorithmX2, All rights reserved.
 *
 * Applied Energistics 2 is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Applied Energistics 2 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Applied Energistics 2.  If not, see <http://www.gnu.org/licenses/lgpl>.
 */

plugins {
    id "net.neoforged.gradle.userdev"
    id "maven-publish"
    id "com.diffplug.spotless"
    id "com.github.johnrengelman.shadow"
    id "de.undercouch.download"
}

sourceSets {
    main {
        java {
            srcDir 'src/main/flatbuffers/generated'
        }
        resources {
            srcDir 'src/generated/resources'
        }
    }
    buildtools
}

configurations {
    shaded {
        transitive = false
    }
    buildtoolsImplementation.extendsFrom(compileClasspath)
    // Dependencies only used for the guide export, but not shipped
    guideExportOnly
    configurations.compileClasspath.extendsFrom(guideExportOnly)
    configurations.runtimeClasspath.extendsFrom(guideExportOnly)
}

repositories {
    maven {
        url "https://maven.shedaniel.me/"
        content {
            includeGroup "me.shedaniel"
            includeGroup "me.shedaniel.cloth"
            includeGroup "dev.architectury"
        }
    }
    maven {
        url "https://maven2.bai.lol"
        content {
            includeGroup "mcp.mobius.waila"
            includeGroup "lol.bai"
        }
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
        content {
            includeGroup "dev.emi"
        }
    }
    maven {
        name 'cursemaven'
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { // for TOP
        url "https://maven.k-4u.nl/"
        content {
            includeGroup "mcjty.theoneprobe"
        }
    }
    maven {
        url = "https://maven.theillusivec4.top/"
        content {
            includeGroup "top.theillusivec4.curios"
        }
    }
    maven {
        url = "https://maven.blamejared.com/"
        content {
            includeGroup "mezz.jei"
        }
    }
    mavenCentral()
}

dependencies {
    // To be copied into the jar file
    shaded project(path: ':libs:markdown', configuration: "archives")
    shaded "io.methvin:directory-watcher:${directory_watcher_version}"
    shaded "org.yaml:snakeyaml:${snakeyaml_version}"
    shaded "com.google.flatbuffers:flatbuffers-java:${flatbuffers_version}"

    implementation(project(':libs:markdown')) {
        transitive = false
    }
    // Do not inherit any transitive dependencies here since we rely on those dependencies being
    // present in Minecrafts own dependencies already.
    implementation("io.methvin:directory-watcher:${directory_watcher_version}") {
        transitive = false
    }
    implementation("org.yaml:snakeyaml:${snakeyaml_version}") {
        transitive = false
    }
    implementation("com.google.flatbuffers:flatbuffers-java:${flatbuffers_version}") {
        transitive = false
    }
    // Used for the guide export
    guideExportOnly("org.bytedeco:ffmpeg-platform:${ffmpeg_version}")

    implementation "net.neoforged:neoforge:${neoforge_version}"

    // compile against provided APIs
    compileOnly "dev.emi:emi-neoforge:${emi_version}:api"

    // Always depend on the REI API to compile
    if (project.runtime_itemlist_mod == "emi") {
        runtimeOnly "dev.emi:emi-neoforge:${emi_version}"

        compileOnly "me.shedaniel:RoughlyEnoughItems-neoforge:${project.rei_version}"
    } else if (project.runtime_itemlist_mod == "rei") {
        implementation "me.shedaniel:RoughlyEnoughItems-neoforge:${project.rei_version}"
    } else {
        compileOnly "me.shedaniel:RoughlyEnoughItems-neoforge:${project.rei_version}"
    }

    compileOnly "mcp.mobius.waila:wthit-api:neo-${project.wthit_version}"
    if (project.runtime_tooltip_mod == "wthit") {
        runtimeOnly("mcp.mobius.waila:wthit:neo-${project.wthit_version}")
    }

    if (project.runtime_tooltip_mod == "jade") {
        implementation("curse.maven:jade-324717:${project.jade_file_id}")
    } else {
        compileOnly("curse.maven:jade-324717:${project.jade_file_id}")
    }

    if (project.runtime_tooltip_mod == "top") {
        implementation("mcjty.theoneprobe:theoneprobe:${project.top_version}")
    } else {
        compileOnly("mcjty.theoneprobe:theoneprobe:${project.top_version}")
    }

    if (project.runtime_curio) {
        runtimeOnly("top.theillusivec4.curios:curios-neoforge:${project.curios_version}")
    }

    // unit test dependencies
    testImplementation(platform("org.junit:junit-bom:${project.junit_version}"))
    testRuntimeOnly(project(":libs:junit"))
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testImplementation("org.junit.platform:junit-platform-launcher")
    testImplementation("org.assertj:assertj-core:3.19.0")
    testImplementation("com.google.guava:guava-testlib:21.0")
    testImplementation("org.mockito:mockito-junit-jupiter:5.3.1")

    compileOnly 'org.apache.commons:commons-configuration2:2.9.0'

    buildtoolsImplementation 'de.siegmar:fastcsv:2.1.0'
    buildtoolsImplementation 'com.google.code.gson:gson:2.8.9'
}
archivesBaseName = artifact_basename

allprojects {
    group = artifact_group

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    // ensure everything uses UTF-8 and not some random codepage chosen by gradle
    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        options.deprecation = false
        options.compilerArgs << "-Xmaxerrs" << "9999"
    }
}

///////////////////
// Version Number
ext.tag = System.getenv('TAG') ?: ""
if (ext.tag) {
    if (!ext.tag.startsWith("neoforge/v")) {
        throw new GradleException("Tags for the neoforge version should start with neoforge/: ${ext.tag}")
    }

    version = ext.tag.substring("neoforge/v".length())
    // Validate that the rest is a semver version
    if (version ==~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/) {
        if (System.getenv("GITHUB_ENV")) {
            def envFile = new File(System.getenv("GITHUB_ENV"))
            envFile.append("VERSION=${version}")
        }
    } else {
        throw new GradleException("Invalid semver: $version")
    }
} else {
    version = version_major + "." + version_minor + "." + version_patch

    def pr = System.getenv('PR_NUMBER') ?: ""
    if (pr) {
        version += "+pr." + pr
    }

    def branch = System.getenv('BRANCH') ?: ""
    if (branch) {
        version += "+branch." + branch
    }
}
test {
    useJUnitPlatform()

    // Might not need this anymore...
    systemProperty "guideDev.ae2guide.sources", file("guidebook").absolutePath

    def aeDir = project.rootDir.absolutePath
    environment(
            "MOD_CLASSES",
            // In Gradle 9, replace with a provider
            List.of(
                    "${project.buildDir}/classes/java/main",
                    "${project.buildDir}/classes/java/test",
                    "${project.buildDir}/resources/main",
                    "${project.buildDir}/resources/test",
            ).stream().map {
                "ae2%%" + it
            }.collect(java.util.stream.Collectors.joining(File.pathSeparator))
    )

    def fmlVersion = "2.0.7"

    environment("fmljunit.assetsDir", new File(gradle.gradleUserHomeDir, "caches/minecraft/assets/${minecraft_version}/").absolutePath)
    environment("fmljunit.neoForgeVersion", neoforge_version)
    environment("fmljunit.fmlVersion", fmlVersion)
    environment("fmljunit.mcVersion", minecraft_version)
    environment("fmljunit.neoFormVersion", neoFormRuntime.findIn(configurations.runtimeClasspath).first().specification.neoFormVersion)

    jvmArgumentProviders.add(new CommandLineArgumentProvider() {
        @Override
        Iterable<String> asArguments() {

            // This includes the system properties
            var runArgs = runs.getByName("client").realiseJvmArguments()
            for (var i = 0; i < runArgs.size(); i++) {
                var arg = runArgs.get(i);
                if (arg.startsWith("-DlegacyClassPath.file=")) {
                    runArgs.set(i, "-DlegacyClassPath.file=${project.rootDir.absolutePath}/build/test_classpath.txt")
                } else if ((arg == "-p" || arg == "--module-path") && i + 1 < runArgs.size()) {
                    runArgs.set(i + 1, test.classpath
                            .filter {
                                it.name.contains("bootstraplauncher")
                                        || it.name.contains("securejarhandler")
                                        || it.name.contains("asm")
                                        || it.name.contains("JarJarFileSystems")
                                        || it.name.startsWith("mockito")
                                        || it.name.startsWith("junit-jupiter")
                                        || it.name.startsWith("junit-platform")
                                        || it.name.startsWith("opentest4j")
                                        || it.name.startsWith("assertj-")
                                        || it.name.startsWith("guava-testlib-")
                            }
                            .join(File.pathSeparator))
                }
            }
            println(runArgs)

            return runArgs
        }
    })

    afterEvaluate {
        dependsOn tasks.named("writeMinecraftClasspathClient")
    }

    doFirst {
        var classPathLines = tasks.getByName("writeMinecraftClasspathClient").output.asFile.get().readLines()
        classPathLines.addAll(test.classpath
                .filter { it.name.startsWith("fmljunit") })
        new File("$aeDir/build/test_classpath.txt").text = classPathLines.join("\n")
    }

//    [
//            "-DignoreList=junit,securejarhandler,asm,asm-commons,asm-tree,asm-util,asm-analysis,bootstraplauncher,JarJarFileSystems,events-${fmlVersion}.jar,core-${fmlVersion}.jar,language-java,language-lowcode,language-minecraft,client-extra,neoforge-,mixinextras-",
//            "--add-modules",
//            "ALL-MODULE-PATH",
//            "--add-opens", "java.base/java.util.jar=cpw.mods.securejarhandler",
//            "--add-opens", "java.base/java.lang.invoke=cpw.mods.securejarhandler",
//            "--add-exports", "java.base/sun.security.util=cpw.mods.securejarhandler",
//            "--add-exports", "jdk.naming.dns/com.sun.jndi.dns=java.naming",
//            "-DlegacyClassPath.file=$aeDir/build/test_classpath.txt",
//            "-Dfml.gameLayerLibraries=events-${fmlVersion}.jar",
//            "-DignoreList=securejarhandler-2.1.24.jar,asm-9.5.jar,asm-commons-9.5.jar,asm-tree-9.5.jar,asm-util-9.5.jar,asm-analysis-9.5.jar,bootstraplauncher-1.1.2.jar,JarJarFileSystems-0.4.0.jar,events-2.0.1.jar,core-2.0.1.jar,language-java-2.0.1.jar,language-lowcode-2.0.1.jar,language-minecraft-2.0.1.jar,mixinextras-neoforge-0.3.2.jar,client-extra,neoforge-",
//            "-DmergeModules=jna-5.10.0.jar,jna-platform-5.10.0.jar",
//            "-Djava.net.preferIPv6Addresses=system",
//            "-Dfml.pluginLayerLibraries=core-${fmlVersion}.jar,language-java-${fmlVersion}.jar,language-lowcode-${fmlVersion}.jar,language-minecraft-${fmlVersion}.jar",
//    ]
}

dependencies {
    buildtoolsImplementation 'de.siegmar:fastcsv:2.1.0'
    buildtoolsImplementation 'com.google.code.gson:gson:2.8.9'
}

/**
 * Configures properties common to all run configurations
 */
def commonSystemProperties = [
        'forge.logging.console.level': 'debug',
        'appeng.tests'               : 'true',
]

////////////////////
// Forge/Minecraft
minecraft {
    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
    }
}

runs {
    configureEach {
        workingDirectory = project.file('run')
        systemProperties = commonSystemProperties
        // property "mixin.debug.export", "true"
        modSources = [sourceSets.main]

        dependencies {
            runtime configurations.shaded
            runtime configurations.guideExportOnly
        }
    }
    client {
        systemProperties = [
                *                          : commonSystemProperties,
                "appeng.tests"             : "true",
                "guideDev.ae2guide.sources": file("guidebook").absolutePath,
        ]
    }
    gametestWorld {
        configure("client")
        programArguments("--username", "AE2Dev", "--quickPlaySingleplayer", "GametestWorld")
        systemProperties = [
                "appeng.tests"             : "true",
                "guideDev.ae2guide.sources": file("guidebook").absolutePath,
        ]
    }
    guide {
        configure("client")
        systemProperties = [
                "guideDev.ae2guide.sources"    : file("guidebook").absolutePath,
                "guideDev.ae2guide.startupPage": "ae2:index.md"
        ]
    }
    server {
    }
    data {
        programArguments = [
                '--mod', 'ae2',
                '--all',
                '--output', file('src/generated/resources/').absolutePath,
                '--existing', file('src/main/resources').absolutePath
        ]
    }
    guideexport {
        configure("client")
        systemProperties = [
                "appeng.runGuideExportAndExit": "true",
                "appeng.guideExportFolder"    : file("$buildDir/guide").absolutePath,
                "guideDev.ae2guide.sources"   : file("guidebook").absolutePath,
                "appeng.version"              : project.version
        ]
    }
    // Use to run the tests
    gametest {
        configure("gameTestServer")
        workingDirectory = project.file("build/gametest")
    }
}

//////////////
// Artifacts
processResources {
    exclude '.cache'
    // Ensure the resources get re-evaluate when the version changes
    inputs.property("version", project.version)
    inputs.property("minecraft_version", project.minecraft_version_range)
    inputs.property("neoforge_version", project.neoforge_version)
    inputs.property("top_version", project.top_version)
    inputs.property("jade_version", project.jade_version_range)

    filesMatching("META-INF/mods.toml") {
        expand 'minecraft_version': project.minecraft_version_range, 'neoforge_version': project.neoforge_version_range,
                'top_version': project.top_version_range,
                'jade_version': project.jade_version_range
        filter { line ->
            line.replace('version="0.0.0"', "version=\"$version\"")
        }
    }
}

jar {
    finalizedBy shadowJar
    archiveClassifier = "plain"
}

shadowJar {
    from sourceSets.main.output.classesDirs
    from sourceSets.main.output.resourcesDir

    from('guidebook') {
        into 'assets/ae2/ae2guide'
    }

    manifest {
        attributes([
                "Specification-Title"   : "Applied Energistics 2",
                "Specification-Vendor"  : "TeamAppliedEnergistics",
                "Specification-Version" : "${project.version}",
                "Implementation-Title"  : "${project.name}",
                "Implementation-Version": "${project.version}",
                "Implementation-Vendor" : "TeamAppliedEnergistics",
        ])
    }

    relocate "io.methvin", "appeng.shaded.methvin"
    relocate "org.yaml.snakeyaml", "appeng.shaded.snakeyaml"

    configurations = [project.configurations.shaded]
    archiveClassifier = null
}

assemble.dependsOn shadowJar

def publicApiIncludePatterns = {
    exclude "**/*Internal.*"
    exclude "**/*Internal\$*.*"
    include "appeng/api/**"
}

javadoc {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath + sourceSets.main.output

    options.addStringOption('Xdoclint:none', '-quiet')
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
}
javadoc publicApiIncludePatterns

task javadocJar(type: Jar, dependsOn: javadoc, group: "build") {
    archiveClassifier = "javadoc"
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    archiveClassifier = "sources"
    from sourceSets.main.allJava
}

task apiJar(type: Jar, group: "build") {
    archiveClassifier = "api"
    // api jar ist just a development aid and serves as both a binary and source jar simultaneously
    from sourceSets.main.output
    from sourceSets.main.allJava
    manifest {
        attributes("Fabric-Loom-Remap": true)
    }
}
apiJar publicApiIncludePatterns

artifacts {
    archives javadocJar
    archives sourcesJar
    archives apiJar
}

//////////////////
// Maven publish
publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.archivesBaseName
            version = project.version

            artifact shadowJar
            artifact sourcesJar
            artifact javadocJar
            artifact apiJar
        }
    }
    repositories {
        maven {
            credentials {
                username System.getenv("GITHUB_ACTOR")
                password System.getenv("GITHUB_TOKEN")
            }
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/AppliedEnergistics/Applied-Energistics-2"
        }
        maven {
            credentials {
                username System.getenv("MODMAVEN_USER")
                password System.getenv("MODMAVEN_PASSWORD")
            }
            name = "modmaven"
            url = "https://modmaven.dev/artifactory/local-releases/"
        }
    }
}

/////////////
// Spotless
spotless {

    java {
        target 'src/*/java/appeng/**/*.java'

        endWithNewline()
        indentWithSpaces()
        removeUnusedImports()
        toggleOffOn()
        eclipse().configFile 'codeformat/codeformat.xml'
        importOrderFile 'codeformat/ae2.importorder'

        // courtesy of diffplug/spotless#240
        // https://github.com/diffplug/spotless/issues/240#issuecomment-385206606
        custom 'noWildcardImports', {
            if (it.contains('*;\n')) {
                throw new Error('No wildcard imports allowed')
            }
        }
        bumpThisNumberIfACustomStepChanges(1)
    }

    format 'json', {
        target 'src/*/resources/**/*.json'
        targetExclude 'src/generated/resources/**'
        prettier().config(['parser': 'json'])
    }
}

////////////////
// Crowdin
task uploadToCrowdin(type: JavaExec) {
    classpath = sourceSets.buildtools.runtimeClasspath
    mainClass = 'Crowdin'
    args 'upload_source'
    workingDir "."
}
task uploadTranslations(type: JavaExec) {
    classpath = sourceSets.buildtools.runtimeClasspath
    mainClass = 'Crowdin'
    args 'upload_translations'
    workingDir "."
}
task downloadFromCrowdin(type: JavaExec) {
    classpath = sourceSets.buildtools.runtimeClasspath
    mainClass = 'Crowdin'
    args 'update_translations'
    workingDir "."
}

// See https://github.com/AppliedEnergistics/Applied-Energistics-2/issues/5259
// Gradle module metadata contains mapped dependencies, making our artifacts unconsumable
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

check.dependsOn tasks.register('validateResources', JavaExec) {
    group = "verification"
    classpath = sourceSets.buildtools.runtimeClasspath
    mainClass = 'ValidateResourceIds'
    workingDir "."
    args "guidebook"
}

/**
 * This task download the FlatBuffers compiler suitable for the current platform.
 */
tasks.register('downloadFlatbufferCompiler', Download) {
    var os = System.getProperty("os.name").toLowerCase(Locale.ROOT)
    var arch = System.getProperty("os.arch")
    if (os.startsWith("windows")) {
        src "https://github.com/google/flatbuffers/releases/download/v${flatbuffers_version}/Windows.flatc.binary.zip"
    } else if (os.startsWith("mac")) {
        if (arch == "aarch64") {
            src "https://github.com/google/flatbuffers/releases/download/v${flatbuffers_version}/Mac.flatc.binary.zip"
        } else if (arch == "amd64") {
            src "https://github.com/google/flatbuffers/releases/download/v${flatbuffers_version}/MacIntel.flatc.binary.zip"
        } else {
            throw new GradleException("Unknown Mac architecture: $arch")
        }
    } else if (os.startsWith("linux")) {
        src "https://github.com/google/flatbuffers/releases/download/v${flatbuffers_version}/Linux.flatc.binary.clang++-12.zip"
    } else {
        throw new GradleException("Unknown OS: $os")
    }
    onlyIfModified true
    dest "${project.buildDir}/flatc.zip"
}

tasks.register('downloadAndUnzipFlatbufferCompiler', Copy) {
    dependsOn downloadFlatbufferCompiler
    from zipTree(downloadFlatbufferCompiler.dest)
    into "${project.buildDir}/flatbuffers-bin"
}
/**
 * Update the generated Java Code for our scene export schema.
 * The code is checked in so this only needs to be run when the schema changes.
 */
tasks.register('updateFlatbufferSources', Exec) {
    group 'build'
    dependsOn downloadAndUnzipFlatbufferCompiler
    workingDir project.projectDir
    commandLine "${project.buildDir}/flatbuffers-bin/flatc",
            "--gen-mutable",
            "--java-package-prefix", "appeng.flatbuffers",
            "--gen-generated",
            "--java",
            "-o",
            "${project.projectDir}/src/main/flatbuffers/generated",
            "${project.projectDir}/src/main/flatbuffers/scene.fbs"

    doFirst {
        file("${project.projectDir}/src/main/flatbuffers/generated").deleteDir()
    }
    doLast {
    }
    doLast {
        // sadly flatc uses an outdated annotation
        def folder = file("${project.projectDir}/src/main/flatbuffers/generated")
        folder.eachFileRecurse(groovy.io.FileType.FILES) { file ->
            String content = file.text
            if (content.contains('@javax.annotation.Generated')) {
                content = content.replace('@javax.annotation.Generated', '@javax.annotation.processing.Generated')
                file.write(content)
            }
        }
    }
}

/**
 * Generate the TypeScript sources for our schema. The sources are manually copied
 * over to the website repository.
 */
tasks.register('updateFlatbufferTypescriptSources', Exec) {
    group 'build'
    dependsOn downloadAndUnzipFlatbufferCompiler
    workingDir project.projectDir
    commandLine "${project.buildDir}/flatbuffers-bin/flatc",
            "--ts-flat-files",
            "--ts",
            "-o",
            "${project.buildDir}/scene-ts",
            "${project.projectDir}/src/main/flatbuffers/scene.fbs"

    doFirst {
        file("${project.buildDir}/scene-ts").deleteDir()
    }
}
