/*
 * This file is part of Applied Energistics 2.
 * Copyright (c) 2013 - 2015, AlgorithmX2, All rights reserved.
 *
 * Applied Energistics 2 is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Applied Energistics 2 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Applied Energistics 2.  If not, see <http://www.gnu.org/licenses/lgpl>.
 */

plugins {
    id "net.neoforged.moddev"
    id "maven-publish"
    id "com.diffplug.spotless"
    id 'com.gradleup.shadow'
    id "de.undercouch.download"
}

apply plugin: ProjectDefaultsPlugin

base {
    archivesName = "appliedenergistics2"
}

neoForge.version = project.neoforge_version

sourceSets {
    main {
        resources {
            srcDir 'src/generated/resources'
        }
    }
    buildtools
}

configurations {
    localRuntimeOnly
    shaded {
        transitive = false
    }
    buildtoolsImplementation.extendsFrom(compileClasspath)
    // Dependencies only used for the guide export, but not shipped
    guideExportOnly
    configurations.compileClasspath.extendsFrom(guideExportOnly)
    configurations.runtimeClasspath.extendsFrom(guideExportOnly)

    runtimeClasspath.extendsFrom localRuntimeOnly
}

import appengbuild.*
import com.diffplug.gradle.spotless.JsonExtension

dependencies {
    // Used for the guide export
    guideExportOnly("org.bytedeco:ffmpeg-platform:${ffmpeg_version}")

    implementation("appeng:guideme")
    // Do not inherit any transitive dependencies here since we rely on those transitive dependencies being
    // present in Minecrafts own dependencies already.
    additionalRuntimeClasspath("io.methvin:directory-watcher:${directory_watcher_version}") {
        transitive = false
    }
    additionalRuntimeClasspath("org.yaml:snakeyaml:${snakeyaml_version}") {
        transitive = false
    }
    additionalRuntimeClasspath("com.google.flatbuffers:flatbuffers-java:${flatbuffers_version}") {
        transitive = false
    }

    // compile against provided APIs
    compileOnly "dev.emi:emi-neoforge:${emi_version}:api"
    compileOnly "me.shedaniel:RoughlyEnoughItems-neoforge:${project.rei_version}"
    compileOnly "mcp.mobius.waila:wthit-api:neo-${project.wthit_version}"
    compileOnly "curse.maven:jade-324717:${project.jade_file_id}"
    compileOnly "mcjty.theoneprobe:theoneprobe:${project.top_version}"

    switch (project.runtime_itemlist_mod) {
        case "emi":
            localRuntimeOnly "dev.emi:emi-neoforge:${emi_version}"
            break
        case "rei":
            localRuntimeOnly "me.shedaniel:RoughlyEnoughItems-neoforge:${project.rei_version}"
            break
    }

    switch (project.runtime_tooltip_mod) {
        case "wthit":
            localRuntimeOnly "mcp.mobius.waila:wthit:neo-${project.wthit_version}"
            break
        case "jade":
            localRuntimeOnly "curse.maven:jade-324717:${project.jade_file_id}"
            break
        case "top":
            localRuntimeOnly "mcjty.theoneprobe:theoneprobe:${project.top_version}"
            break
    }

    if (project.runtime_curio == "true") {
        localRuntimeOnly("top.theillusivec4.curios:curios-neoforge:${project.curios_version}")
    }

    // Athena
    if (project.runtime_athena == "true") {
        localRuntimeOnly("curse.maven:athena-841890:${project.athena_file_id}")
    }

    // unit test dependencies
    testImplementation(platform("org.junit:junit-bom:${project.junit_version}"))
    testImplementation(platform("org.assertj:assertj-bom:${project.assertj_version}"))
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testImplementation("org.junit.platform:junit-platform-launcher")
    testImplementation("org.assertj:assertj-core")
    testImplementation("com.google.guava:guava-testlib:21.0")
    testImplementation("org.mockito:mockito-junit-jupiter:5.12.0")
    testImplementation("net.neoforged:testframework:${project.neoforge_version}")

    compileOnly 'org.apache.commons:commons-configuration2:2.9.0'

    buildtoolsImplementation 'de.siegmar:fastcsv:2.1.0'
    buildtoolsImplementation 'com.google.code.gson:gson:2.8.9'
}

///////////////////
// Version Number
ext.tag = System.getenv('TAG') ?: ""
if (ext.tag) {
    if (!ext.tag.startsWith("neoforge/v")) {
        throw new GradleException("Tags for the neoforge version should start with neoforge/: ${ext.tag}")
    }

    project.version = ext.tag.substring("neoforge/v".length())
} else {
    // This essentially tries to implement delay expansion of the project version based on a value source to
    // still support configuration caching.
    project.version = providers.gradleProperty("version").orElse("").flatMap(version -> {
        if (!version.isBlank()) {
            return providers.provider { version }
        }
        return providers.of(ProjectVersionSource.class, spec -> {
            spec.getParameters().getDefaultBranches().addAll("main", "neoforge/" + project.minecraft_version)
        });
    }).get()
}

tasks.register("printProjectVersion", PrintProjectVersion.class);

test {
    useJUnitPlatform()

    // Might not need this anymore...
    systemProperty "guideme.ae2.guide.sources", file("guidebook").absolutePath
}

dependencies {
    buildtoolsImplementation 'de.siegmar:fastcsv:2.1.0'
    buildtoolsImplementation 'com.google.code.gson:gson:2.8.9'
}

/**
 * Configures properties common to all run configurations
 */
Map<String, String> commonSystemProperties = [
        'forge.logging.console.level': 'debug',
        'appeng.tests'               : 'true',
]

neoForge {
    mods {
        ae2 {
            sourceSet sourceSets.main
        }
    }

    runs {
        configureEach {
            gameDirectory = project.file('run')
            systemProperties = commonSystemProperties
            // property "mixin.debug.export", "true"
            logLevel = org.slf4j.event.Level.DEBUG
            systemProperties.put("guideme.ae2.guide.sources", file("guidebook").absolutePath)
        }
        client {
            client()
            systemProperties.put("appeng.tests", "true")
        }
        gametestWorld {
            client()
            programArguments = [
                    "--username", "AE2Dev", "--quickPlaySingleplayer", "GametestWorld"
            ]
            systemProperties.put("appeng.tests", "true")
        }
        guide {
            client()

            systemProperties.put("guideme.ae2.guide.startupPage", "ae2:index.md")
        }
        server {
            server()
        }
        data {
            data()
            programArguments = [
                    '--mod', 'ae2',
                    '--all',
                    '--output', file('src/generated/resources/').absolutePath,
                    '--existing', file('src/main/resources').absolutePath
            ]
        }
        guideexport {
            client()
            systemProperties.put("guideme.ae2.guide.export.runAndExit", "true")
            systemProperties.put("guideme.ae2.guide.export.destination", file("build/guide").absolutePath)
            systemProperties.put("guideme.ae2.guide.export.version", project.version)
        }
        // Use to run the tests
        gametest {
            type = "gameTestServer"
            gameDirectory = project.file("build/gametest")
        }
    }

    unitTest {
        enable()
        testedMod = mods.ae2
    }
}

configurations.additionalRuntimeClasspath.extendsFrom configurations.shaded
configurations.additionalRuntimeClasspath.extendsFrom configurations.guideExportOnly

//////////////
// Artifacts
Map<String, String> expansionVariables = [
        "project_version": project.version,
        'minecraft_version': project.minecraft_version_range,
        'neoforge_version': project.neoforge_version_range,
        'top_version': project.top_version_range,
        'jade_version': project.jade_version_range
]

processResources {
    exclude '.cache'
    // Ensure the resources get re-evaluate when the version changes
    for (var entry : expansionVariables.entrySet()) {
        inputs.property(entry.key, entry.value)
    }

    filesMatching("META-INF/neoforge.mods.toml") {
        expand expansionVariables
        filter { line ->
            line.replace('version="0.0.0"', "version=\"${expansionVariables['project_version']}\"")
        }
    }
}

jar {
    finalizedBy shadowJar
    archiveClassifier = "plain"
}

shadowJar {
    from sourceSets.main.output.classesDirs
    from sourceSets.main.output.resourcesDir

    from('guidebook') {
        into 'assets/ae2/ae2guide'
    }

    relocate "io.methvin", "appeng.shaded.methvin"
    relocate "org.yaml.snakeyaml", "appeng.shaded.snakeyaml"

    configurations = [project.configurations.shaded]
    archiveClassifier = null
}

assemble.dependsOn shadowJar

def publicApiIncludePatterns = {
    exclude "**/*Internal.*"
    exclude "**/*Internal\$*.*"
    include "appeng/api/**"
}

javadoc {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath + sourceSets.main.output

    options.addStringOption('Xdoclint:none', '-quiet')
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
}
javadoc publicApiIncludePatterns

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier = "javadoc"
    from javadoc.destinationDir
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier = "sources"
    from sourceSets.main.allJava
}

tasks.register('apiJar', Jar) {
    archiveClassifier = "api"
    // api jar ist just a development aid and serves as both a binary and source jar simultaneously
    from sourceSets.main.output
    from sourceSets.main.allJava
}
apiJar publicApiIncludePatterns

artifacts {
    archives javadocJar
    archives sourcesJar
    archives apiJar
}

//////////////////
// Maven publish
publishing {
    publications {
        maven(MavenPublication) {
            artifactId = "appliedenergistics2"
            version = project.version

            artifact shadowJar
            artifact sourcesJar
            artifact javadocJar
            artifact apiJar
        }
    }
    repositories {
        maven {
            name = "Local"
            url = file("build/repo").toURI()
        }
    }
}

/////////////
// Spotless
spotless {

    java {
        target 'src/*/java/appeng/**/*.java'

        endWithNewline()
        indentWithSpaces()
        removeUnusedImports()
        toggleOffOn()
        eclipse().configFile 'codeformat/codeformat.xml'
        importOrderFile 'codeformat/ae2.importorder'

        // courtesy of diffplug/spotless#240
        // https://github.com/diffplug/spotless/issues/240#issuecomment-385206606
        custom 'noWildcardImports', {
            if (it.contains('*;\n')) {
                throw new Error('No wildcard imports allowed')
            }

            it
        }
        bumpThisNumberIfACustomStepChanges(1)
    }

   json {
        target 'src/*/resources/**/*.json'
        targetExclude 'src/generated/resources/**'
        var biomeConfig = it.new JsonExtension.BiomeJson(null)
        try {
            biomeConfig.downloadDir(new File(rootDir, ".gradle/biome").absolutePath)
        } catch (Exception ignored) {
        }
        addStep(biomeConfig.createStep())
        indentWithSpaces(2)
        endWithNewline()
    }
}

////////////////
// Crowdin
tasks.register('uploadToCrowdin', JavaExec) {
    classpath = sourceSets.buildtools.runtimeClasspath
    mainClass = 'Crowdin'
    args 'upload_source'
    workingDir "."
}
tasks.register('uploadTranslations', JavaExec) {
    classpath = sourceSets.buildtools.runtimeClasspath
    mainClass = 'Crowdin'
    args 'upload_translations'
    workingDir "."
}
tasks.register('downloadFromCrowdin', JavaExec) {
    classpath = sourceSets.buildtools.runtimeClasspath
    mainClass = 'Crowdin'
    args 'update_translations'
    workingDir "."
}

check.dependsOn tasks.register('validateResources', JavaExec) {
    group = "verification"
    classpath = sourceSets.buildtools.runtimeClasspath
    mainClass = 'ValidateResourceIds'
    workingDir "."
    args "guidebook"
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}
