/*
 * This file is part of Applied Energistics 2.
 * Copyright (c) 2013 - 2015, AlgorithmX2, All rights reserved.
 *
 * Applied Energistics 2 is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Applied Energistics 2 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Applied Energistics 2.  If not, see <http://www.gnu.org/licenses/lgpl>.
 */

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id "maven-publish"
    id "com.diffplug.gradle.spotless" version "4.3.0"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "idea"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: "eclipse"

// All jar files from this folder will be added automatically as runtime mod dependencies
def extraModsDir = "extra-mods-${minecraft_version}"

repositories {
    flatDir {
        name "extra-mods"
        dir file(extraModsDir)
    }
    mavenLocal()
    mavenCentral()
    maven { // modmaven, maven proxy
        name 'modmaven'
        url "https://modmaven.dev/"
    }
    maven { url 'https://maven.blamejared.com' } //Patchouli
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // compile against provided APIs
    compileOnly "mezz.jei:jei-${jei_minecraft_version}:${jei_version}:api"
    compileOnly "mcjty.theoneprobe:TheOneProbe-${minecraft_release}:${minecraft_release}-${top_version}:api"
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")

    // Runtime, Mods
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}:${jei_version}")
    runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-${minecraft_release}:${minecraft_release}-${top_version}")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    // Locally sourced extra mods for runtime (i.e. testing)
    for (extraModJar in fileTree(dir: extraModsDir, include: '*.jar')) {
        def basename = extraModJar.name.substring(0, extraModJar.name.length() - ".jar".length())
        def versionSep = basename.lastIndexOf('-')
        assert versionSep != -1
        def artifactId = basename.substring(0, versionSep)
        def version = basename.substring(versionSep + 1)
        runtimeOnly fg.deobf("extra-mods:$artifactId:$version")
    }

    // unit test dependencies
    testCompile "junit:junit:4.13"
    
    // Annotation Processors
    annotationProcessor 'org.spongepowered:mixin:0.8:processor'
}
group = artifact_group
archivesBaseName = artifact_basename

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

// ensure everything uses UTF-8 and not some random codepage chosen by gradle
compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

///////////////////
// Version Number
version = version_major + "." + version_minor + "." + version_patch

ext.pr = System.getenv('PR_NUMBER') ?: ""
if (ext.pr) {
  version = version + "+pr." + ext.pr
}

ext.branch = System.getenv('BRANCH') ?: ""
if (ext.branch) {
  version = version + "+branch." + ext.branch
}

ext.release = System.getenv('RELEASE') ?: ""
if (ext.release) {
  version = ext.release
}

ext.isAlpha = project.version.contains("alpha")
ext.isBeta = project.version.contains("beta")

sourceSets {
    api
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        resources {
            srcDir 'src/generated/resources'
        }
    }
    test {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        java {
            exclude '**/*'
        }
    }
}

configurations {
    apiCompile.extendsFrom(compile)
}

////////////////////
// Forge/Minecraft
minecraft {
    mappings channel: "snapshot", version: project.mcp_mappings

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            property 'forge.logging.console.level', 'debug'
            // See https://github.com/Vazkii/Patchouli#mixin-troubleshooting
            property 'mixin.env.disableRefMap', 'true'
            workingDirectory project.file('run')
            property "mixin.debug.export", "true"
            properties 'mixin.env.disableRefMap': 'true'
            mods {
                appliedenergistics2 {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
        server {
            property 'forge.logging.console.level', 'debug'
            workingDirectory project.file('run')
            mods {
                appliedenergistics2 {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
        data {
            property 'forge.logging.console.level', 'debug'
            workingDirectory project.file('run')
            // ForgeGradle will just force-exit the Gradle Daemon which fails our builds in case
            // a daemon is used for any reason.
            forceExit false
            args '--mod', 'appliedenergistics2', '--all', '--output', file('src/generated/resources/')
            mods {
                appliedenergistics2 {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
    }
}

///////////
// Mixins
mixin {
    add sourceSets.main, "appliedenergistics2.mixins.refmap.json"
}

////////////////
// Jar Signing
def signProps = [:]
if (System.getenv("KEY_STORE_FILE")) {
    signProps['keyStore'] = System.getenv("KEY_STORE_FILE")
    signProps['storePass'] = System.getenv("KEY_STORE_PASS")
    signProps['alias'] = System.getenv("KEY_STORE_ALIAS")
    signProps['keyPass'] = System.getenv("KEY_STORE_KEY_PASS")
}

task signJar(type: net.minecraftforge.gradle.common.task.SignJar, dependsOn: 'reobfJar') {
    onlyIf { !signProps.isEmpty() }

    if (!signProps.isEmpty()) {
        keyStore = signProps.keyStore
        alias = signProps.alias
        storePass = signProps.storePass
        keyPass = signProps.keyPass

        inputFile = jar.archivePath
        outputFile = jar.archivePath
    }
}

//////////////
// Aritfacts
processResources {
    exclude '.cache'

    filesMatching("META-INF/mods.toml") {
        expand 'version': version, 'minecraft_version': project.minecraft_version_range, 'forge_version': project.forge_version_range
    }
}

jar {
    finalizedBy 'reobfJar'
    finalizedBy 'signJar'

    from sourceSets.main.output.classesDirs
    from sourceSets.api.output.classesDirs
    from sourceSets.main.output.resourcesDir
    from sourceSets.api.output.resourcesDir

    manifest {
        attributes([
                "Specification-Title": "Applied Energistics 2",
                "Specification-Vendor": "TeamAppliedEnergistics",
                "Specification-Version": "${project.version}",
                "Implementation-Title": "${project.name}",
                "Implementation-Version": "${project.version}",
                "Implementation-Vendor" :"TeamAppliedEnergistics",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "appliedenergistics2.mixins.json"
        ])
    }
}

task javadocs(type: Javadoc) {
    classpath = sourceSets.main.compileClasspath
    source = sourceSets.api.java
    include "appeng/api/**"

    options.addStringOption('Xdoclint:none', '-quiet')
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
}

task javadocJar(type: Jar, dependsOn: javadocs) {
    classifier = "javadoc"
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allJava
    from sourceSets.api.allJava
}

task apiJar(type: Jar) {
    classifier = "api"
    from sourceSets.api.output
    include "appeng/api/**"

    // TODO: when FG bug is fixed, remove allJava from the api jar.
    // https://github.com/MinecraftForge/ForgeGradle/issues/369
    // Gradle should be able to pull them from the -sources jar.
    from sourceSets.api.allJava
}

artifacts {
    archives javadocJar
    archives sourcesJar
    archives apiJar
}

//////////////////
// Maven publish
publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.archivesBaseName
            version = project.version

            // ForgeGradle will generate wild dependency definitions, see https://github.com/MinecraftForge/ForgeGradle/issues/584
            // Since we don't actually depend on anything, just remove the entire node.
            pom.withXml {
                asNode().remove(asNode().dependencies)
            }

            from components.java
            artifact sourcesJar
            artifact javadocJar
            artifact apiJar
        }
    }
    repositories {
        maven {
            credentials {
                username System.getenv("GITHUB_ACTOR")
                password System.getenv("GITHUB_TOKEN")
            }
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/AppliedEnergistics/Applied-Energistics-2"
        }
        maven {
            credentials {
                username System.getenv("MODMAVEN_USER")
                password System.getenv("MODMAVEN_PASSWORD")
            }
            name = "modmaven"
            url = "https://modmaven.dev/artifactory/local-releases/"
        }
    }
}

/////////////
// Spotless
spotless {
    java {
        target 'src/*/java/appeng/**/*.java'

        indentWithSpaces()
        eclipse().configFile 'codeformat/codeformat.xml'
        importOrderFile 'codeformat/ae2.importorder'
    }
    format 'json', {
        target 'src/*/resources/**/*.json'
        targetExclude 'src/generated/resources/**'
        prettier().config(['parser': 'json'])
    }
}

////////////////
// Curse Forge
if (System.getenv("CURSEFORGE")) {
    def cfReleaseType = "release"
    if (ext.isAlpha) {
      cfReleaseType = "alpha"
    } else if (ext.isBeta) {
      cfReleaseType = "beta"
    }

    curseforge {
        apiKey = System.getenv("CURSEFORGE")
        project {
            id = project.curseforge_project
            changelogType = "markdown"
            changelog = System.getenv("CHANGELOG") ?: "Please visit our [releases](https://github.com/AppliedEnergistics/Applied-Energistics-2/releases) for a changelog"
            releaseType = cfReleaseType
        }
    }
}

////////////////
// IntelliJ Project Import
// The Mixin annotation process does not have an obfuscation source when running through the IntelliJ compiler,
// thus we have to prevent it from being activated as part of importing this Gradle project into IntelliJ.
if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}
